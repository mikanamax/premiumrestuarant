payable contract Reservations =
  
    
  record reserve = 
    {
    owner: address,
    id : int,
    name : string,
    meal : string,
    users : int,
    price : int,
    timestamp : int
    }
    
  record state = {
    reserves : map(int, reserve),
    orders : int}
    
  entrypoint init() = { 
    reserves = {},
    orders = 0}
  //returns lenght of lands registered
  entrypoint ordersLength() : int = 
    state.orders  
    
  entrypoint getOrder(index : int) = 
    switch(Map.lookup(index, state.reserves))
      None => abort("Order doesnt exist")
      Some(x) => x  
    //Registers a Land
    
  payable stateful entrypoint createReservation( name' : string, meal' : string, price' :int,  users' : int) = 
    let timestamp = Chain.timestamp
    let newOrder = {
      id = ordersLength()+1,
      name = name', 
      owner  = Call.caller,
      meal = meal',
      users= users',
      price = price',
      timestamp = timestamp}
    
    let index = ordersLength() + 1
    put(state{reserves[index] = newOrder, orders = index})
    pay(price')
  
    
  entrypoint getPrice(index : int) = 
    state.reserves[index].price
  payable stateful entrypoint pay(price : int) = 
    Chain.spend(Contract.address, price)  
